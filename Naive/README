1. Pre-requisites:
    - The code is written in C++ using Boost library.

    Checklist:
    - GNU C++
    - Boost Library



2. How to compile and run?

    - Compiling the code: gmake or make in the directory where code is present.
    - Running the code:

        ./naive <num_graphs> <graphs_file> -s <sup_val> -c -o <output_file> -p <num_partitions> [-l/-g] <local_file>

        where <num_graphs>    - integer, the number of graphs in the input file.
              <graphs_file>   - input file with the graphs (see 3 below for format)
              -s              - specifies the support value <sup_val>
              <sup_val>       - integer, number between 1 and <num_graphs>
              -c              - counts the exact frequency value
              -o              - prints the maximal frequent subgraph in the file provided
              <output_file>   - string, output file to store the maximal frequent subgraphs
              -p              - specifies the number of partition <partition>
              <num_partitions>- integer, the number of partitions.
              -l              - Mention this flag for doing Local Computation *
              -g              - Mention this flag for doing Global Computation *
              <local_file>
        
        * Note mention either -l or -g flag.

See 3 below (Output) for information 
on how to use these options. See run1.sh, run2.sh, run3.sh and run4.sh for 
sample running options.


3. What is the input and output format?

    - Input:

        t # A
        v B C
        u D E F

        where t denotes the beginning of a new graph whose id is A.
              v denotes node with id B and label C.
              u denotes edge with node ids D and E with label F.
              A, B, C, D, E, F are integers.

        The graph is considered as undirected. See the directory "Data" for 
sample inputs.


    - Output:
        ./naive <num_graphs> <graphs_file> -s <sup_val> -c -o <output_file> -p <partition> -l <local_file>

        The code performs Local Computation
        - Prints:
		   the total time taken by the Local Comptuation. 
		   the total number of local maximal frequent subgraphs generated across all partitions. 
           the maximal frequent subgraphs generated along with its frequency count in the file "output_file". 

    - Output:
        ./naive <num_graphs> <graphs_file> -s <sup_val> -c -o <output_file> -p <partition> -g <local_file>

        The code performs Global Computation. It reads the local MFS from <local_file> generated in the Local Computation.
        - Prints:
		   the total time taken by the Global Comptuation. 
		   the total number of global maximal frequent subgraphs generated across the database. 
           the maximal frequent subgraphs generated along with its frequency count in the file "output_file".


4. Additional scripts:

    - If you are generating the dataset using the tool provided by

      M. Kuromochi and G. Karypis. Frequent subgraph discovery. pages 313-320, 
ICDM 2001.
      the node and edge labels are generated as labels. We provide you with a 
script "convert.pl" (located in Data directory) which takes as input the data 
generated by the above tool and prints on stdout the new data file with the 
node and edge labels mapped to integers.

      The following command converts the old_file.txt which has string labels 
for nodes and edges into new_file.txt with integer labels for nodes and edges.

        $ perl convert.pl <old_file.txt >new_file.txt
-------------------------------------------------------------------------------
